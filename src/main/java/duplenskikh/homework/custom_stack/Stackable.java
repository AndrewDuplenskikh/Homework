package duplenskikh.homework.custom_stack;

/**
 * Стек - структура данных, в которой доступен только один элемент данных:
 * тот, который был в него вставлен последним. Удалив этот элемент,
 * пользователь получается доступ к элементу, расположенному ниже и т.д.
 *
 * @param <T> тип элементов, которые содержатся в стеке.
 */
public interface Stackable<T> {
    /**
     * Возвращает количество элементов в стеке.
     *
     * @return количество элементов в стеке.
     */
    public int size();

    /**
     * Добавляет элемент в стек.
     *
     * @param t тип вставляемого элемента.
     * @throws CapacityException в случае, когда хранилище переполнено.
     */
    public void push(T t) throws CapacityException;

    /**
     * Возвращает и удаляет (посредством ограничения доступа) последний
     * добавленный элемент стека.
     *
     * @return последний добавленный элемент.
     * @throws CapacityException в случае, когда хранилище пустое.
     */
    public T pop() throws CapacityException;

    /**
     * Возвращает, но не удаляет, последний добавленный элемент. Не
     * ограничивает к нему доступ.
     *
     * @return последний добавленный элемент.
     * @throws CapacityException в случае, когда хранилище пустое.
     */
    public T peek() throws CapacityException;
}
